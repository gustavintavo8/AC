=~=~=~=~=~=~=~=~=~=~=~= PuTTY log 2021.12.15 15:55:20 =~=~=~=~=~=~=~=~=~=~=~=
login as: student
student@localhost's password: 
Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.4.0-210-generic i686)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

66 packages can be updated.
2 updates are security updates.

New release '18.04.6 LTS' available.
Run 'do-release-upgrade' to upgrade to it.


Last login: Wed Nov  3 16:05:35 2021 from 10.0.2.2
student@2ac:~$ student@2ac:~$ ls
exam3
student@2ac:~$ cd exam3/
student@2ac:~/exam3$ ñsls
2cache.c  3program.c  config.txt  prompt.sh  trace.prg
student@2ac:~/exam3$ ./prosh prompt.sh
prompt.sh: 3: prompt.sh: function: not found
Usage: prompt.sh <uo>
prompt.sh: 5: prompt.sh: Syntax error: "}" unexpected
student@2ac:~/exam3$ source prompt.sh UO281798student@2ac:~/exam3$ source prompt.sh UO281798
16:35:08|UO281798@~/exam3$ ls
2cache.c  3program.c  config.txt  prompt.sh  trace.prg
16:35:12|UO281798@~/exam3$ ls
2cache.c  3program.c  config.txt  prompt.sh  trace.prg
16:35:50|UO281798@~/exam3$ gcc 2cache.c -o 2cache
16:35:59|UO281798@~/exam3$ valfgrind --tollol =cachegrind ./2cache 
==1668== Cachegrind, a cache and branch-prediction profiler
==1668== Copyright (C) 2002-2015, and GNU GPL'd, by Nicholas Nethercote et al.
==1668== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1668== Command: ./2cache
==1668== 
--1668-- warning: L3 cache found, using its data for the LL simulation.
==1668== 
==1668== I   refs:      1,707,174,457
==1668== I1  misses:              738
==1668== LLi misses:              732
==1668== I1  miss rate:          0.00%
==1668== LLi miss rate:          0.00%
==1668== 
==1668== D   refs:      1,044,170,757  (679,538,770 rd   + 364,631,987 wr)
==1668== D1  misses:       34,181,763  (  1,036,770 rd   +  33,144,993 wr)
==1668== LLd misses:       18,640,321  (  1,030,439 rd   +  17,609,882 wr)
==1668== D1  miss rate:           3.3% (        0.2%     +         9.1%  )
==1668== LLd miss rate:           1.8% (        0.2%     +         4.8%  )
==1668== 
==1668== LL refs:          34,182,501  (  1,037,508 rd   +  33,144,993 wr)
==1668== LL misses:        18,641,053  (  1,031,171 rd   +  17,609,882 wr)
==1668== LL miss rate:            0.7% (        0.0%     +         4.8%  )
16:36:40|UO281798@~/exam3$ 16:36:40|UO281798@~/exam3$ valgrind --tool=cachegrind ./2cache 
==1670== Cachegrind, a cache and branch-prediction profiler
==1670== Copyright (C) 2002-2015, and GNU GPL'd, by Nicholas Nethercote et al.
==1670== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1670== Command: ./2cache
==1670== 
--1670-- warning: L3 cache found, using its data for the LL simulation.
==1670== 
==1670== I   refs:      1,707,174,457
==1670== I1  misses:              738
==1670== LLi misses:              732
==1670== I1  miss rate:          0.00%
==1670== LLi miss rate:          0.00%
==1670== 
==1670== D   refs:      1,044,170,757  (679,538,770 rd   + 364,631,987 wr)
==1670== D1  misses:       34,181,763  (  1,036,770 rd   +  33,144,993 wr)
==1670== LLd misses:       18,640,321  (  1,030,439 rd   +  17,609,882 wr)
==1670== D1  miss rate:           3.3% (        0.2%     +         9.1%  )
==1670== LLd miss rate:           1.8% (        0.2%     +         4.8%  )
==1670== 
==1670== LL refs:          34,182,501  (  1,037,508 rd   +  33,144,993 wr)
==1670== LL misses:        18,641,053  (  1,031,171 rd   +  17,609,882 wr)
==1670== LL miss rate:            0.7% (        0.0%     +         4.8%  )
16:39:07|UO281798@~/exam3$ 16:39:07|UO281798@~/exam3$ nano 3program.c 
[ Reading File ][ Read 60 lines (Converted from DOS format) ]  GNU nano 2.5.3                                                                  File: 3program.c                                                                                                                                           #include <stdio.h>#include <sys/types.h>#include <unistd.h>#include <stdlib.h>#include <stdint.h>#include <string.h>#include <atc/linmem.h>// Vector sizeconst uint16_t N = 8043;int main(void) {unsigned int first_page = 1;unsigned int last_page = 0;unsigned int page = 0;unsigned int pte = 0;void * virtual_addr;uint16_t vector[N];memset(vector, 0, sizeof(vector));printf("\nVector address: %.8Xh\n", (unsigned int)vector);// TODO: compute first and last page numbers// last_page = // first_page = // Print page and frame numbersprintf("Vector pages: ");for (page = first_page; page <= last_page; page++) {// Print page numberprintf("%.5Xh ", page);// TODO: virtual address within the current page (offset 0)// virtual_addr = // Get PTE of the current pageif (get_pte(virtual_addr, &pte)) {perror("Linmem module error");return -1;}// Check page is present in memoryif (pte & 0x1) {// Print frame numberprintf("(%.5Xh) ", pte >> 12);}else {  printf("(no page) ");}}// Print PTE flags for variable Nif (get_pte((void *)&N, &pte)) {perror("Linmem module error");return -1;}printf("\nFlags of N page: %.3Xh\n\n", pte & 0xFFF);^G Get Help^O Write Out^W Where Is^K Cut Text^J Justify^C Cur Pos^Y Prev PageM-\ First Line    M-W WhereIs Next  ^^ Mark TextM-} Indent Text   M-U Undo^B Back^X Exit^R Read File^\ Replace^U Uncut Text     ^T To Spell^_ Go To Line     ^V Next PageM-/ Last Line     M-] To Bracket    M-^ Copy Text     M-{ Unindent Text M-E Redo^F Forwardreturn 0;}}}16:40:22|UO281798@~/exam3$ 16:40:22|UO281798@~/exam3$ l
2cache*  2cache.c  3program.c  cachegrind.out.1668  cachegrind.out.1670  config.txt  prompt.sh  trace.prg
16:40:34|UO281798@~/exam3$ gcc 3program.c -o 3program.c  -lmem
16:41:15|UO281798@~/exam3$ ./3program 

Vector address: BF985630h
Linmem module error: No such file or directory
Vector pages: 16:41:19|UO281798@~/exam3$ systemctl srartatus linmem
 linmem.service - Linmem driver
   Loaded: loaded (/lib/systemd/system/linmem.service; enabled; vendor preset: enabled)
   Active: failed (Result: exit-code) since Wed 2021-12-15 15:51:36 CET; 49min ago
  Process: 833 ExecStart=/opt/linmem/load (code=exited, status=1/FAILURE)
 Main PID: 833 (code=exited, status=1/FAILURE)

Dec 15 15:51:36 2ac systemd[1]: Starting Linmem driver...
Dec 15 15:51:36 2ac load[833]: modprobe: FATAL: Module linmem not found in directory /lib/modules/4.4.0-210-generic
Dec 15 15:51:36 2ac systemd[1]: linmem.service: Main process exited, code=exited, status=1/FAILURE
Dec 15 15:51:36 2ac systemd[1]: Failed to start Linmem driver.
Dec 15 15:51:36 2ac systemd[1]: linmem.service: Unit entered failed state.
Dec 15 15:51:36 2ac systemd[1]: linmem.service: Failed with result 'exit-code'.
16:41:33|UO281798@~/exam3$ cd /usr/src/arctc/linmem
16:41:40|UO281798@/usr/src/atc/linmem$ sudo make clean
[sudo] password for student: 
make -C /lib/modules/4.4.0-210-generic/build M=/usr/src/atc/linmem clean
make[1]: Entering directory '/usr/src/linux-headers-4.4.0-210-generic'
make[1]: Leaving directory '/usr/src/linux-headers-4.4.0-210-generic'
rm -f libmem.a libmem.o test
16:41:45|UO281798@/usr/src/atc/linmem$ sudo make install
make -C /lib/modules/4.4.0-210-generic/build M=/usr/src/atc/linmem -Wall modules
make[1]: Entering directory '/usr/src/linux-headers-4.4.0-210-generic'
  CC [M]  /usr/src/atc/linmem/linmem.o
  Building modules, stage 2.
  MODPOST 1 modules
  CC      /usr/src/atc/linmem/linmem.mod.o
  LD [M]  /usr/src/atc/linmem/linmem.ko
make[1]: Leaving directory '/usr/src/linux-headers-4.4.0-210-generic'
gcc -Wall -c libmem.c
ar rcs libmem.a libmem.o
chmod +x opt/*
mkdir -p /opt/linmem-1.0
cp opt/* /opt/linmem-1.0/
cp linmem.ko /lib/modules/4.4.0-210-generic/kernel/drivers/misc/
ln -f -s /opt/linmem-1.0 /opt/linmem
cp libmem.a /usr/lib/
mkdir -p /usr/include/atc
cp include/linmem.h /usr/include/atc/
depmod -a
cp systemd/linmem.service /lib/systemd/system/
systemctl link /lib/systemd/system/linmem.service
systemctl enable linmem.service
systemctl start linmem.service
16:41:56|UO281798@/usr/src/atc/linmem$ cd
16:41:58|UO281798@~$ ls
exam3
16:41:58|UO281798@~$ cd exam3/
16:42:00|UO281798@~/exam3$ 16:42:00|UO281798@~/exam3$ cd exam3/lscdsudo make installcleancd /usr/src/atc/linmemsystemctl status linmem./3program 

Vector address: BFF31240h
Vector pages: 
Flags of N page: 025h

16:42:04|UO281798@~/exam3$ ./3program cd exam3/lscdsudo make installcleancd /usr/src/atc/linmemsystemctl status linmem./3program gcc 3program.c -o 3program -lmemlnano 3program.c 
[ Reading File ][ Read 60 lines (Converted from DOS format) ]  GNU nano 2.5.3                          File: 3program.c                                                           #include <stdio.h>#include <sys/types.h>#include <unistd.h>#include <stdlib.h>#include <stdint.h>#include <string.h>#include <atc/linmem.h>// Vector sizeconst uint16_t N = 8043;int main(void) {unsigned int first_page = 1;unsigned int last_page = 0;unsigned int page = 0;unsigned int pte = 0;void * virtual_addr;uint16_t vector[N];memset(vector, 0, sizeof(vector));printf("\nVector address: %.8Xh\n", (unsigned int)vector);// TODO: compute first and last page numbers// last_page = // first_page = // Print page and frame numbersprintf("Vector pages: ");for (page = first_page; page <= last_page; page++) {// Print page numberprintf("%.5Xh ", page);// TODO: virtual address within the current page (offset 0)// virtual_addr = // Get PTE of the current pageif (get_pte(virtual_addr, &pte)) {perror("Linmem module error");return -1;}// Check page is present in memoryif (pte & 0x1) {// Print frame numberprintf("(%.5Xh) ", pte >> 12);}else {  printf("(no page) ");}}// Print PTE flags for variable Nif (get_pte((void *)&N, &pte)) {perror("Linmem module error");return -1;}printf("\nFlags of N page: %.3Xh\n\n", pte & 0xFFF);^G Get Help     ^O Write Out    ^W Where Is     ^K Cut Text     ^J Justify^C Cur Pos^Y Prev Page^X Exit^R Read File    ^\ Replace^U Uncut Text   ^T To Spell     ^_ Go To Line   ^V Next Pagereturn 0;}#include <stdio.h>#include <sys/types.h>#include <unistd.h>#include <stdlib.h>#include <stdint.h>#include <string.h>#include <atc/linmem.h>// Vector sizeconst uint16_t N = 8043;int main(void) {unsigned int first_page = 1;unsigned int last_page = 0;unsigned int page = 0;unsigned int pte = 0;void * virtual_addr;uint16_t vector[N];memset(vector, 0, sizeof(vector));printf("\nVector address: %.8Xh\n", (unsigned int)vector);// TODO: compute first and last page numbers// last_page = // first_page = // Print page and frame numbersprintf("Vector pages: ");for (page = first_page; page <= last_page; page++) {Search:                                                                                                              M-C Case Sens   M-B Backwards   M-J FullJstify  ^Y First Line   ^W Beg of Par   ^P PrevHstoryC CancelM-R Regexp      ^RT Go To Line   ^V Last Line    ^O End of Par   ^N NextHstoryvirtual^O Write Out    ^W Where Is     ^K Cut Text     ^J Justify      ^C Cur Pos      ^Y Prev PageX Exit  ^R Read File    ^\U Uncut Text   ^T To Spell     ^_ Go To Line   ^V Next PageModified  iif( i    iif(get_pte  &            i  return 0;}}}#include <stdio.h>#include <sys/types.h>#include <unistd.h>#include <stdlib.h>#include <stdint.h>#include <string.h>#include <atc/linmem.h>// Vector sizeconst uint16_t N = 8043;int main(void) {unsigned int first_page = 1;unsigned int last_page = 0;unsigned int page = 0;unsigned int pte = 0;void * virtual_addr;uint16_t vector[N];memset(vector, 0, sizeof(vector));printf("\nVector address: %.8Xh\n", (unsigned int)vector);// TODO: compute first and last page numbers// last_page = // first_page = // Print page and frame numbersprintf("Vector pages: ");for (page = first_page; page <= last_page; page++) {Save modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?                                                          Y Yes N No  C Cancel16:49:45|UO281798@~/exam3$ nano 3program.c 
[ Reading File ][ Read 60 lines (Converted from DOS format) ]  GNU nano 2.5.3                          File: 3program.c                                                           #include <stdio.h>#include <sys/types.h>#include <unistd.h>#include <stdlib.h>#include <stdint.h>#include <string.h>#include <atc/linmem.h>// Vector sizeconst uint16_t N = 8043;int main(void) {unsigned int first_page = 1;unsigned int last_page = 0;unsigned int page = 0;unsigned int pte = 0;void * virtual_addr;uint16_t vector[N];memset(vector, 0, sizeof(vector));printf("\nVector address: %.8Xh\n", (unsigned int)vector);// TODO: compute first and last page numbers// last_page = // first_page = // Print page and frame numbersprintf("Vector pages: ");for (page = first_page; page <= last_page; page++) {// Print page numberprintf("%.5Xh ", page);// TODO: virtual address within the current page (offset 0)// virtual_addr = // Get PTE of the current pageif (get_pte(virtual_addr, &pte)) {perror("Linmem module error");return -1;}// Check page is present in memoryif (pte & 0x1) {// Print frame numberprintf("(%.5Xh) ", pte >> 12);}else {  printf("(no page) ");}}// Print PTE flags for variable Nif (get_pte((void *)&N, &pte)) {perror("Linmem module error");return -1;}printf("\nFlags of N page: %.3Xh\n\n", pte & 0xFFF);^G Get Help     ^O Write Out    ^W Where Is     ^K Cut Text     ^J Justify^C Cur Pos^Y Prev Page^X Exit^R Read File    ^\ Replace^U Uncut Text   ^T To Spell     ^_ Go To Line   ^V Next PageModified unsigned int codePage, dataPage, bssPage;unsigned int codeFrame, dataFrame, bssFrame; unsigned int codeFlags, dataFlags, bssFlags; unsigned int codePage, dataPage, bssPage; unsigned int codePage, dataPage, bssPage; memset(vector, 0, sizeof(vector));perror("Linmem module error");return -1;}printf("\nFlags of N page: %.3Xh\n\n", pte & 0xFFF);return 0;}}} printf("\nFlags of N page: %.3Xh\n\n", pte & 0xFFF);codeFrame = codePage & 0xFFFFF000;codeFlags = codePage & 0x00000FFF;dataFrame = dataPage & 0xFFFFF000;dataFlags = dataPage & 0x00000FFF;bssFrame = bssPage & 0xFFFFF000; bssFlags = bssPage & 0x00000FFF; printf("\nFlags of N page: %.3Xh\n\n", pte & 0xFFF);printf("\nKernel code page %05Xh ---> Frame: %05Xh; Flags: %03Xh\n", codePage, codeFrame, codeFlags);printf("Kernel data page %05Xh ---> Frame: %05Xh; Flags: %03Xh\n", dataPage, dataFrame, dataFlags);      printf("Kernel bss  page %05Xh ---> Frame: %05Xh; Flags: %03Xh\n\n", bssPage, bssFrame, bssFlags);      File Name to Write [DOS Format]: 3program.c                                                                                 M-D DOS Format         M-A Append             M-B Backup FileC Cancel       M-M Mac Format         M-P Prepend            ^T To Files [ Wrote 73 lines ]        ^O Write Out    ^W Where Is     ^K Cut Text     ^J Justify      ^C Cur Pos^Y Prev PageX Exit  ^R Read File    ^\ Replace      ^U Uncut Text   ^T To Spell     ^_ Go To Line   ^V Next Page16:51:26|UO281798@~/exam3$ nano 3program.c ./3programcd exam3/lscdsudo make installcleaninstallcdlscdsudo make installcleancd /usr/src/atc/linmemsystemctl status linmem./3program gcc 3program.c -o 3program -lmem
16:51:33|UO281798@~/exam3$ gcc 3program.c -o 3program -lmemnano 3program.c ./3program

Vector address: BFD44150h
Vector pages: 
Kernel code page B76DC244h ---> Frame: B76DC000h; Flags: 244h
Kernel data page 00000h ---> Frame: 00000h; Flags: 000h
Kernel bss  page 00001h ---> Frame: 00000h; Flags: 001h


Flags of N page: 025h

16:51:35|UO281798@~/exam3$ ./3program gcc 3program.c -o 3program -lmemnano 3program.c 
[ Reading File ][ Read 73 lines (Converted from DOS format) ]  GNU nano 2.5.3                          File: 3program.c                                                           #include <stdio.h>#include <sys/types.h>#include <unistd.h>#include <stdlib.h>#include <stdint.h>#include <string.h>#include <atc/linmem.h>// Vector sizeconst uint16_t N = 8043;int main(void) {unsigned int first_page = 1;unsigned int last_page = 0;unsigned int page = 0;unsigned int pte = 0;void * virtual_addr;uint16_t vector[N];unsigned int codePage, dataPage, bssPage;unsigned int codeFrame, dataFrame, bssFrame;unsigned int codeFlags, dataFlags, bssFlags;memset(vector, 0, sizeof(vector));printf("\nVector address: %.8Xh\n", (unsigned int)vector);// TODO: compute first and last page numbers// last_page = // first_page = // Print page and frame numbersprintf("Vector pages: ");for (page = first_page; page <= last_page; page++) {// Print page numberprintf("%.5Xh ", page);// TODO: virtual address within the current page (offset 0)// virtual_addr = // Get PTE of the current pageif (get_pte(virtual_addr, &pte)) {perror("Linmem module error");return -1;}// Check page is present in memoryif (pte & 0x1) {// Print frame numberprintf("(%.5Xh) ", pte >> 12);}else {  printf("(no page) ");}}// Print PTE flags for variable Nif (get_pte((void *)&N, &pte)) {^G Get Help     ^O Write Out    ^W Where Is     ^K Cut Text     ^J Justify^C Cur Pos^Y Prev Page^X Exit^R Read File    ^\ Replace^U Uncut Text   ^T To Spell     ^_ Go To Line   ^V Next Page16:52:38|UO281798@~/exam3$ nano 3program.c ./3programnano 3program.c
[ Reading File ][ Read 73 lines (Converted from DOS format) ]  GNU nano 2.5.3                          File: 3program.c                                                           #include <stdio.h>#include <sys/types.h>#include <unistd.h>#include <stdlib.h>#include <stdint.h>#include <string.h>#include <atc/linmem.h>// Vector sizeconst uint16_t N = 8043;int main(void) {unsigned int first_page = 1;unsigned int last_page = 0;unsigned int page = 0;unsigned int pte = 0;void * virtual_addr;uint16_t vector[N];unsigned int codePage, dataPage, bssPage;unsigned int codeFrame, dataFrame, bssFrame;unsigned int codeFlags, dataFlags, bssFlags;memset(vector, 0, sizeof(vector));printf("\nVector address: %.8Xh\n", (unsigned int)vector);// TODO: compute first and last page numbers// last_page = // first_page = // Print page and frame numbersprintf("Vector pages: ");for (page = first_page; page <= last_page; page++) {// Print page numberprintf("%.5Xh ", page);// TODO: virtual address within the current page (offset 0)// virtual_addr = // Get PTE of the current pageif (get_pte(virtual_addr, &pte)) {perror("Linmem module error");return -1;}// Check page is present in memoryif (pte & 0x1) {// Print frame numberprintf("(%.5Xh) ", pte >> 12);}else {  printf("(no page) ");}}// Print PTE flags for variable Nif (get_pte((void *)&N, &pte)) {^G Get Help     ^O Write Out    ^W Where Is     ^K Cut Text     ^J Justify^C Cur Pos^Y Prev Page^X Exit^R Read File    ^\ Replace^U Uncut Text   ^T To Spell     ^_ Go To Line   ^V Next PageModified///      unsigned int codePage, dataPage, bssPage;/////      unsigned int codeFrame, dataFrame, bssFrame;//////      unsigned int codeFlags, dataFlags, bssFlags;//perror("Linmem module error");return -1;}codeFrame = codePage & 0xFFFFF000;codeFlags = codePage & 0x00000FFF;dataFrame = dataPage & 0xFFFFF000;dataFlags = dataPage & 0x00000FFF;bssFrame = bssPage & 0xFFFFF000;bssFlags = bssPage & 0x00000FFF;printf("\nKernel code page %05Xh ---> Frame: %05Xh; Flags: %03Xh\n", codePage, codeFrame, codeFlags);printf("Kernel data page %05Xh ---> Frame: %05Xh; Flags: %03Xh\n", dataPage, dataFrame, dataFlags);     printf("Kernel bss  page %05Xh ---> Frame: %05Xh; Flags: %03Xh\n\n", bssPage, bssFrame, bssFlags);      printf("\nFlags of N page: %.3Xh\n\n", pte & 0xFFF);return 0;}}///      codeFrame = codePage & 0xFFFFF000;/////      codeFlags = codePage & 0x00000FFF;/////      dataFrame = dataPage & 0xFFFFF000;/////      dataFlags = dataPage & 0x00000FFF;/////      bssFrame = bssPage & 0xFFFFF000;/////      bssFlags = bssPage & 0x00000FFF;/////      printf("\nKernel code page %05Xh ---> Frame: %05Xh; Flags: %03Xh\n", codePage, codeFrame, codeFlags);/////      printf("Kernel data page %05Xh ---> Frame: %05Xh; Flags: %03Xh\n", dataPage, dataFrame, dataFlags);/////      printf("Kernel bss  page %05Xh ---> Frame: %05Xh; Flags: %03Xh\n\n", bssPage, bssFrame, bssFlags);//#include <stdio.h>#include <sys/types.h>#include <unistd.h>#include <stdlib.h>#include <stdint.h>#include <string.h>#include <atc/linmem.h>// Vector sizeconst uint16_t N = 8043;int main(void) {unsigned int first_page = 1;unsigned int last_page = 0;unsigned int page = 0;unsigned int pte = 0;void * virtual_addr;uint16_t vector[N];//      unsigned int codePage, dataPage, bssPage;//      unsigned int codeFrame, dataFrame, bssFrame;//      unsigned int codeFlags, dataFlags, bssFlags;memset(vector, 0, sizeof(vector));printf("\nVector address: %.8Xh\n", (unsigned int)vector);// TODO: compute first and last page numbers// last_page = // first_page = Save modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?                                                          Y Yes N No  C CancelFile Name to Write [DOS Format]: 3program.c                 ^G Get HelpM-D DOS FormatM-A AppendM-B Backup File^C Cancel       M-M Mac FormatM-P Prepend^T To Files [ Wrote 73 lines ]        16:54:54|UO281798@~/exam3$ ./r3program 

Vector address: BF9A6B20h
Vector pages: 
Kernel code page B774E244h ---> Frame: B774E000h; Flags: 244h
Kernel data page 00000h ---> Frame: 00000h; Flags: 000h
Kernel bss  page 00001h ---> Frame: 00000h; Flags: 001h


Flags of N page: 025h

16:55:28|UO281798@~/exam3$ 